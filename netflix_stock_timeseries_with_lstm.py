# -*- coding: utf-8 -*-
"""Netflix_Stock_TimeSeries_with_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15vQGKlKjVChq1VwNzuhgUVPI4rRSMcHA
"""

from google.colab import files
files.upload()

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

df = pd.read_csv('/content/NFLX.csv')
df.tail()

# menghapus kolom yang tidak digunakan

df.drop(['Open','High','Low','Adj Close','Volume'],axis=1,inplace=True)
df.head()

# mengambil data dari tahun 2010 sampai 2020

df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')
fd = (df['Date'] >= '2010-01-01') & (df['Date'] <= '2020-12-31')
df.loc[fd]
df = df.loc[fd]
display(df)

# memeriksa nilai yang kosong

df.isnull().sum()

# plotting data

date = df['Date'].values
close  = df['Close'].values

date = np.array(date)
close = np.array(close)

plt.figure(figsize=(15,5))
plt.plot(date, close)
plt.title('Average last price at stock trades', fontsize=20)
plt.ylabel('Price close')
plt.xlabel('Seasonaly')

# split dataset menjadi train dan validation

from sklearn.model_selection import train_test_split
x_train, x_valid, y_train, y_valid = train_test_split(close, date, test_size=0.2, shuffle=False)

# menampilkan hasil split

print("data train : ",len(x_train))
print("data validation : ",len(x_valid))

# menerapkan window untuk model

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

# membangun model dengan Sequential

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
validation_set = windowed_dataset(x_valid, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  # menggunakan LSTM
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

Mae = (df['Close'].max() - df['Close'].min()) * 10/100
print(Mae)

# membuat callback dengan on_epoch_end

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< 54.9531417):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

from keras.losses import Huber
optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(
    train_set,
    validation_data = validation_set,
    epochs=100,
    callbacks = [callbacks]
    )

# summary

log_mae = history.history['mae']
log_loss = history.history['loss']

def view_summary(nm,la,mm):
  print(nm, ' : ', float(f'{(mm(la)):.05f}'))

def ln(opt):
  if opt == 1:
    print("_"*50)
  elif opt == 2:
    print('='*50)
  else:
    print('-'*50)

print('\n')
ln(1)
print('SUMMARY'.center(50))
ln(2)
# memanggil fungsi view_summary
view_summary('Mae',log_mae,min)
view_summary('Loss',log_loss,min)
ln(1)